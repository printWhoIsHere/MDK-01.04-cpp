#include <iostream>
using namespace std;

const int SIZE10 = 10;
const int SIZE20 = 20;
const int SIZE30 = 30;

void menu();
void clear();

void Labyrinth_10x10() {
    int array[SIZE10][SIZE10] = {
            {1,1,1,0,1,1,1,1,1,1},
            {0,0,1,0,0,0,0,0,0,1},
            {1,0,1,1,1,1,1,1,0,1},
            {1,0,1,0,0,0,1,0,0,1},
            {1,0,1,0,1,0,1,0,1,1},
            {1,0,1,0,1,0,0,0,0,1},
            {1,0,1,0,1,1,1,1,0,1},
            {1,0,1,0,1,0,0,1,0,1},
            {1,0,0,0,1,1,0,0,0,1},
            {1,1,1,1,1,1,1,1,1,1}
    };
    cout << "\n\n\n";
    for (int i = 0; i < SIZE10; i++)
    {
        for (int j = 0; j < SIZE10; j++) {
            if (array[i][j] == 1) {
                cout << static_cast<char>(178);
                cout << static_cast<char>(178);    // Выведет символ, номер из таблицы ASCII
            }
            else {
                cout << "  ";
            }
        }
        cout << endl;
    }
}

void Labyrinth_20x20() {
    int array[SIZE20][SIZE20] = {
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0},
            {1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1},
            {1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1},
            {1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1},
            {1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,1},
            {1,0,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1},
            {1,0,0,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,1},
            {1,1,1,0,1,0,0,0,1,0,1,1,1,0,0,1,0,0,0,1},
            {1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,0,1},
            {1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,0,0,0,0,1},
            {1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1},
            {1,0,1,0,1,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0},
            {1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,1},
            {1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1},
            {1,0,0,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1},
            {1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,1,1,1,0,1},
            {1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1},
            {1,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,0,1,0,1},
            {1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1}
    };
    cout << "\n\n\n";
    for (int i = 0; i < SIZE20; i++)
    {
        for (int j = 0; j < SIZE20; j++) {
            if (array[i][j] == 1) {
                cout << static_cast<char>(178);
                cout << static_cast<char>(178);    // Выведет символ, номер из таблицы ASCII
            }
            else {
                cout << "  ";
            }
        }
        cout << endl;
    }
}

void Labyrinth_30x30() {
    int array[SIZE30][SIZE30] = {       
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,0,1,1,1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
            {1,0,1,1,1,1,0,1,0,0,1,0,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1},
            {1,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,1,1},
            {1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,0,1,0,1,1},
            {1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1},
            {1,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,1,1,0,1},
            {1,0,0,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1},
            {1,1,1,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1},
            {1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1},
            {1,0,0,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1},
            {1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1},
            {1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,1,0,1,0,0,1},
            {1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,0,1},
            {1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1},
            {1,0,0,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1},
            {1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,1},
            {1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1},
            {1,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1},
            {1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,1},
            {1,0,1,0,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1},
            {1,0,1,0,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0,0,1},
            {1,0,1,0,1,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1,1,0,1},
            {1,0,1,0,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1},
            {1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,1},
            {1,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1},
            {1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1},
            {1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1},
            {1,0,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1},
            {1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    };
    cout << "\n\n\n";
    for (int i = 0; i < SIZE30; i++)
    {
        for (int j = 0; j < SIZE30; j++) {
            if (array[i][j] == 1) {
                cout << static_cast<char>(178);
                cout << static_cast<char>(178);    // Выведет символ, номер из таблицы ASCII
            }
            else {
                cout << "  ";
            }
        }
        cout << endl;
    }
}

void clear() {
    system("cls");
}

void menu() {
    cout << "\a\n\n***Welcome to the program - \"Arrays - Labyrinths\"***\t\t\t\n";
    cout << "--------------------\n";
    cout << "[0] exit\n";
    cout << "--------------------\n";
    cout << "[1] Labyrinth [10x10]\n";
    cout << "[2] Labyrinth [20x20]\n";
    cout << "[3] Labyrinth [30x30]\n";
    cout << "--------------------\n";
    cout << "\aChoose a labyrinth: ";
    short condition; cin >> condition;

    switch (condition) {
        case 0:
            abort();
            break;
        case 1:
            Labyrinth_10x10();
            break;
        case 2:
            Labyrinth_20x20();
            break;
        case 3: 
            Labyrinth_30x30();
            break;
        default:
            clear();
            menu();
    }
}
    

int main(int argc, char* argv[]) {
    menu();
    system("pause");
    return 0;
}
